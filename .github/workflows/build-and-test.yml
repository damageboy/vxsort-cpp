name: Build and Test

on:
  - push
  - pull_request

env:
  CCACHE_VERSION: 4.7.3
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows-MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu-GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++"
          }
        - {
            name: "Ubuntu-Clang",
            os: ubuntu-latest,
            cc: "clang",
            cxx: "clang++"
          }
        - {
            name: "macOS-Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.1

    - name: Check for AVX2/512 on macOS
      shell: bash
      id: check_avx2_macos
      if: startsWith(runner.os, 'macOs')
      continue-on-error: true
      run: |
        sysctl hw.model
        sysctl kern.version
        sysctl machdep.cpu.leaf7_features
        sysctl machdep.cpu.leaf7_features | grep -i AVX2
    - name: Check for AVX2/512 on Linux
      shell: bash
      id: check_avx2_linux
      if: startsWith(runner.os, 'Linux')
      continue-on-error: true
      run: |
        lscpu
        lscpu | grep 'Flags:' | grep -i avx2
        lscpu | grep 'Flags:' | grep -i avx512f
    - name: Check for AVX2/512 on Windows
      id: check_avx2_windows
      shell: bash
      if: startsWith(runner.os, 'Windows')
      continue-on-error: true
      run: |
        aria2c "https://download.sysinternals.com/files/Coreinfo.zip" -o CoreInfo.zip
        unzip CoreInfo.zip
        rm CoreInfo.zip
        ./CoreInfo64.exe -accepteula -f
    - name: Download ccache
      id: ccache
      shell: bash
      run: |
        aria2c "https://github.com/cristianadam/ccache/releases/download/v${CCACHE_VERSION}/${{ runner.os }}.tar.xz" -o ccache.tar.xz
        tar xf ./ccache.tar.xz
        rm ccache.tar.xz
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: bash
      run: |
        echo "timestamp=$(date -u '+%Y-%m-%d-%H;%M;%S')" > $GITHUB_OUTPUT
    - name: ccache cache files
      uses: actions/cache@v3.3.1
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-
    - name: Setup VS env
      uses: egor-tensin/vs-shell@v2
      if: startsWith(runner.os, 'Windows')
      with:
        arch: x64
    - name: Configure
      shell: bash
      run: |
        export CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }}
        cmake -S . -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DVXSORT_CCACHE=ON -G Ninja
    - name: Build
      shell: bash
      run: |
        export NINJA_STATUS="[%f/%t %o/sec]"
        export PATH="${GITHUB_WORKSPACE}:$PATH"
        export CCACHE_BASEDIR="${GITHUB_WORKSPACE}" CCACHE_DIR="${GITHUB_WORKSPACE}/.ccache" CCACHE_COMPRESS="true" CCACHE_COMPRESSLEVEL="6" CCACHE_MAXSIZE="600M" CCACHE_COMPILERCHECK="content"
        ccache -p
        ccache -z
        cmake --build build
        ccache -s
    - name: Upload .ccache to cache
      uses: actions/cache/save@v3
      if: always()
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
    - name: Run tests
      shell: bash
      working-directory: build
      if:  ${{ !startsWith(runner.os, 'macOS') || !steps.check_avx2_macos.outcome == 'failure' }}
      run: |
        export GTEST_OUTPUT="xml:junit/"
        ctest -J
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: tests/${{ matrix.config.name}}
        path: build/tests/junit/*.xml
        reporter: java-junit
