name: Build and Test

on:
  - push
  - pull_request

env:
  CCACHE_VERSION: 4.7.3
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows-MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Ubuntu-GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++"
          }
        - {
            name: "Ubuntu-Clang",
            os: ubuntu-latest,
            cc: "clang",
            cxx: "clang++"
          }
        - {
            name: "macOS-Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.2

    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.1

    - name: Check for AVX2/512 on macOS
      shell: bash
      id: check_avx2_macos
      if: startsWith(runner.os, 'macOs')
      continue-on-error: true
      run: |
        sysctl hw.model
        sysctl kern.version
        sysctl machdep.cpu.leaf7_features
        sysctl machdep.cpu.leaf7_features | grep -i AVX2
    - name: Check for AVX2/512 on Linux
      shell: bash
      id: check_avx2_linux
      if: startsWith(runner.os, 'Linux')
      continue-on-error: true
      run: |
        lscpu
        lscpu | grep 'Flags:' | grep -i avx2
        lscpu | grep 'Flags:' | grep -i avx512f
    - name: Download ccache
      id: ccache
      shell: bash
      run: |
        aria2c "https://github.com/cristianadam/ccache/releases/download/v${CCACHE_VERSION}/${{ runner.os }}.tar.xz" -o ccache.tar.xz
        tar xf ./ccache.tar.xz
        rm ccache.tar.xz
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: bash
      #shell: cmake -P {0}
      run: |
        echo "timestamp=$(date -u '+%Y-%m-%d-%H;%M;%S')" > $GITHUB_OUTPUT
    - name: ccache cache files
      uses: actions/cache@v3.3.1
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        execute_process(
          COMMAND cmake
            -S .
            -B build
            -DCMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            -DVXSORT_CCACHE=ON
            -G Ninja
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status: ${result}")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        set(ENV{CCACHE_BASEDIR} "${ccache_basedir}")
        set(ENV{CCACHE_DIR} "${ccache_basedir}/.ccache")
        set(ENV{CCACHE_COMPRESS} "true")
        set(ENV{CCACHE_COMPRESSLEVEL} "6")
        set(ENV{CCACHE_MAXSIZE} "400M")
        if ("${{ matrix.config.cxx }}" STREQUAL "cl")
          set(ENV{CCACHE_MAXSIZE} "600M")
        endif()
        execute_process(COMMAND ccache -p)
        execute_process(COMMAND ccache -z)
        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ccache -s)
    - name: Run tests
      shell: bash
      working-directory: build
      if:  ${{ !startsWith(runner.os, 'macOS') || !steps.check_avx2_macos.outcome == 'failure' }}
      run: |
        export GTEST_OUTPUT="xml:junit/"
        ctest -J
    - name: Test Report
      working-directory: build
      uses: dorny/test-reporter@v1
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: VxSort Tests
        path: build/tests/junit/*.xml
        reporter: java-junit
